// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: common/proto/packetManipulation/packetManipulation.proto

package packetManipulation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PacketManipulationService_StartManipulationProxy_FullMethodName = "/packetManipulationServ.PacketManipulationService/StartManipulationProxy"
)

// PacketManipulationServiceClient is the client API for PacketManipulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketManipulationServiceClient interface {
	StartManipulationProxy(ctx context.Context, in *RequestForManipulationProxy, opts ...grpc.CallOption) (*ResponseFromManipulationProxy, error)
}

type packetManipulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketManipulationServiceClient(cc grpc.ClientConnInterface) PacketManipulationServiceClient {
	return &packetManipulationServiceClient{cc}
}

func (c *packetManipulationServiceClient) StartManipulationProxy(ctx context.Context, in *RequestForManipulationProxy, opts ...grpc.CallOption) (*ResponseFromManipulationProxy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseFromManipulationProxy)
	err := c.cc.Invoke(ctx, PacketManipulationService_StartManipulationProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketManipulationServiceServer is the server API for PacketManipulationService service.
// All implementations must embed UnimplementedPacketManipulationServiceServer
// for forward compatibility.
type PacketManipulationServiceServer interface {
	StartManipulationProxy(context.Context, *RequestForManipulationProxy) (*ResponseFromManipulationProxy, error)
	mustEmbedUnimplementedPacketManipulationServiceServer()
}

// UnimplementedPacketManipulationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPacketManipulationServiceServer struct{}

func (UnimplementedPacketManipulationServiceServer) StartManipulationProxy(context.Context, *RequestForManipulationProxy) (*ResponseFromManipulationProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartManipulationProxy not implemented")
}
func (UnimplementedPacketManipulationServiceServer) mustEmbedUnimplementedPacketManipulationServiceServer() {
}
func (UnimplementedPacketManipulationServiceServer) testEmbeddedByValue() {}

// UnsafePacketManipulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketManipulationServiceServer will
// result in compilation errors.
type UnsafePacketManipulationServiceServer interface {
	mustEmbedUnimplementedPacketManipulationServiceServer()
}

func RegisterPacketManipulationServiceServer(s grpc.ServiceRegistrar, srv PacketManipulationServiceServer) {
	// If the following call pancis, it indicates UnimplementedPacketManipulationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PacketManipulationService_ServiceDesc, srv)
}

func _PacketManipulationService_StartManipulationProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestForManipulationProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketManipulationServiceServer).StartManipulationProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketManipulationService_StartManipulationProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketManipulationServiceServer).StartManipulationProxy(ctx, req.(*RequestForManipulationProxy))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketManipulationService_ServiceDesc is the grpc.ServiceDesc for PacketManipulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketManipulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packetManipulationServ.PacketManipulationService",
	HandlerType: (*PacketManipulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartManipulationProxy",
			Handler:    _PacketManipulationService_StartManipulationProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/packetManipulation/packetManipulation.proto",
}
