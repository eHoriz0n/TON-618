// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tcpService.proto

package tcpService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TcpService_StartTcpServer_FullMethodName = "/tcpServ.TcpService/StartTcpServer"
)

// TcpServiceClient is the client API for TcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TcpServiceClient interface {
	StartTcpServer(ctx context.Context, in *RequestForTcp, opts ...grpc.CallOption) (*ResponseFromTcp, error)
}

type tcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTcpServiceClient(cc grpc.ClientConnInterface) TcpServiceClient {
	return &tcpServiceClient{cc}
}

func (c *tcpServiceClient) StartTcpServer(ctx context.Context, in *RequestForTcp, opts ...grpc.CallOption) (*ResponseFromTcp, error) {
	out := new(ResponseFromTcp)
	err := c.cc.Invoke(ctx, TcpService_StartTcpServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcpServiceServer is the server API for TcpService service.
// All implementations must embed UnimplementedTcpServiceServer
// for forward compatibility
type TcpServiceServer interface {
	StartTcpServer(context.Context, *RequestForTcp) (*ResponseFromTcp, error)
	mustEmbedUnimplementedTcpServiceServer()
}

// UnimplementedTcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTcpServiceServer struct {
}

func (UnimplementedTcpServiceServer) StartTcpServer(context.Context, *RequestForTcp) (*ResponseFromTcp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTcpServer not implemented")
}
func (UnimplementedTcpServiceServer) mustEmbedUnimplementedTcpServiceServer() {}

// UnsafeTcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcpServiceServer will
// result in compilation errors.
type UnsafeTcpServiceServer interface {
	mustEmbedUnimplementedTcpServiceServer()
}

func RegisterTcpServiceServer(s grpc.ServiceRegistrar, srv TcpServiceServer) {
	s.RegisterService(&TcpService_ServiceDesc, srv)
}

func _TcpService_StartTcpServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestForTcp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServiceServer).StartTcpServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TcpService_StartTcpServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServiceServer).StartTcpServer(ctx, req.(*RequestForTcp))
	}
	return interceptor(ctx, in, info, handler)
}

// TcpService_ServiceDesc is the grpc.ServiceDesc for TcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcpServ.TcpService",
	HandlerType: (*TcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTcpServer",
			Handler:    _TcpService_StartTcpServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcpService.proto",
}
