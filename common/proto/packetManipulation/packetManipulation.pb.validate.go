// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/proto/packetManipulation/packetManipulation.proto

package packetManipulation

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PctmConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PctmConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PctmConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PctmConfigMultiError, or
// nil if none found.
func (m *PctmConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PctmConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServer()) < 1 {
		err := PctmConfigValidationError{
			field:  "Server",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClient()) < 1 {
		err := PctmConfigValidationError{
			field:  "Client",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDurationConfig() == nil {
		err := PctmConfigValidationError{
			field:  "DurationConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDurationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PctmConfigValidationError{
					field:  "DurationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PctmConfigValidationError{
					field:  "DurationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDurationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PctmConfigValidationError{
				field:  "DurationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PctmConfigMultiError(errors)
	}

	return nil
}

// PctmConfigMultiError is an error wrapping multiple validation errors
// returned by PctmConfig.ValidateAll() if the designated constraints aren't met.
type PctmConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PctmConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PctmConfigMultiError) AllErrors() []error { return m }

// PctmConfigValidationError is the validation error returned by
// PctmConfig.Validate if the designated constraints aren't met.
type PctmConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PctmConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PctmConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PctmConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PctmConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PctmConfigValidationError) ErrorName() string { return "PctmConfigValidationError" }

// Error satisfies the builtin error interface
func (e PctmConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPctmConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PctmConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PctmConfigValidationError{}

// Validate checks the field values on DurationConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationConfigMultiError,
// or nil if none found.
func (m *DurationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDurationSeconds() < 0 {
		err := DurationConfigValidationError{
			field:  "DurationSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDropRate(); val < 0 || val > 1 {
		err := DurationConfigValidationError{
			field:  "DropRate",
			reason: "value must be inside range [0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCorruptRate(); val < 0 || val > 1 {
		err := DurationConfigValidationError{
			field:  "CorruptRate",
			reason: "value must be inside range [0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DurationConfigMultiError(errors)
	}

	return nil
}

// DurationConfigMultiError is an error wrapping multiple validation errors
// returned by DurationConfig.ValidateAll() if the designated constraints
// aren't met.
type DurationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DurationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DurationConfigMultiError) AllErrors() []error { return m }

// DurationConfigValidationError is the validation error returned by
// DurationConfig.Validate if the designated constraints aren't met.
type DurationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationConfigValidationError) ErrorName() string { return "DurationConfigValidationError" }

// Error satisfies the builtin error interface
func (e DurationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationConfigValidationError{}

// Validate checks the field values on RequestForManipulationProxy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestForManipulationProxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestForManipulationProxy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestForManipulationProxyMultiError, or nil if none found.
func (m *RequestForManipulationProxy) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestForManipulationProxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := RequestForManipulationProxyValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestForManipulationProxyValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestForManipulationProxyValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestForManipulationProxyValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestForManipulationProxyMultiError(errors)
	}

	return nil
}

// RequestForManipulationProxyMultiError is an error wrapping multiple
// validation errors returned by RequestForManipulationProxy.ValidateAll() if
// the designated constraints aren't met.
type RequestForManipulationProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestForManipulationProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestForManipulationProxyMultiError) AllErrors() []error { return m }

// RequestForManipulationProxyValidationError is the validation error returned
// by RequestForManipulationProxy.Validate if the designated constraints
// aren't met.
type RequestForManipulationProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestForManipulationProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestForManipulationProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestForManipulationProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestForManipulationProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestForManipulationProxyValidationError) ErrorName() string {
	return "RequestForManipulationProxyValidationError"
}

// Error satisfies the builtin error interface
func (e RequestForManipulationProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestForManipulationProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestForManipulationProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestForManipulationProxyValidationError{}

// Validate checks the field values on ResponseFromManipulationProxy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseFromManipulationProxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseFromManipulationProxy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResponseFromManipulationProxyMultiError, or nil if none found.
func (m *ResponseFromManipulationProxy) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseFromManipulationProxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ResponseFromManipulationProxyMultiError(errors)
	}

	return nil
}

// ResponseFromManipulationProxyMultiError is an error wrapping multiple
// validation errors returned by ResponseFromManipulationProxy.ValidateAll()
// if the designated constraints aren't met.
type ResponseFromManipulationProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseFromManipulationProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseFromManipulationProxyMultiError) AllErrors() []error { return m }

// ResponseFromManipulationProxyValidationError is the validation error
// returned by ResponseFromManipulationProxy.Validate if the designated
// constraints aren't met.
type ResponseFromManipulationProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseFromManipulationProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseFromManipulationProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseFromManipulationProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseFromManipulationProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseFromManipulationProxyValidationError) ErrorName() string {
	return "ResponseFromManipulationProxyValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseFromManipulationProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseFromManipulationProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseFromManipulationProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseFromManipulationProxyValidationError{}
